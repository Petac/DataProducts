predict(cart,newdata=data1)
training<-subset(segmentationOriginal,segmentationOriginal$Case=="Train")
View(training)
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
predict(cart,newdata=data1)
print(cart$finalModel)
fancyRpartPlot(cart$finalModel)
View(data1)
View(testing)
colnames(segmentationOriginal)
p<-colnames(segmentationOriginal)
data2<-data.frame(p)
View(data2)
data2<-data.frame(colnames(p))
View(data2)
data.frame
?data.frame
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(), ]
View(testing)
testing<-rbind(TotalIntenCh2 = c(23, 50,57,NA), FiberWidthCh1 = c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2),VarIntenCh4 =c(NA,100,100,100)
)
View(testing)
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(), ]
testing$TotalIntenCh2<-c(23, 50,57,NA)
dim(testing)<-(4,119)
dim(testing)<-c(4,119)
dim(testing)
?dim
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(1:4), ]
testing<-NULL
testing
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(1:4), ]
View(testing)
?rm
?empty
empty(testing)
testing[testing]<-NA
testing[!testing==0]<-NA
View(testing)
testing[testing==0]<-NA
testing$TotalIntenCh2<-c(23, 50,57,NA)
testing$FiberWidthCh1<-c(10,10,8,8)
testing$PerimStatusCh1<-c(2,NA,NA,2)
testing$VarIntenCh4<-c(NA,100,100,100)
View(testing)
colnames(tesing)
colnames(testing)
testing
predict(cart,newdata=testing)
ls<-predict(cart,newdata=testing)
summary(ls)
testing[testing==NA]<-NULL
testing
ls<-predict(cart,newdata=testing,na.rm=TRUE)
ls
summary(ls)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(plyr)
library(dplyr)
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
cart<-train(Class~.,data=training,method="rpart")
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
training<-subset(segmentationOriginal,segmentationOriginal$Case=="Train")
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
library(rattle)
fancyRpartPlot(cart$finalModel)
?fancyRpartPlot
fancyRpartPlot(cart)
cart<-rpart(Class~.,data=training)
fancyRpartPlot(cart$finalModel)
summary(cart)
fancyRpartPlot(cart$finalModel)
fancyRpartPlot(cart)
testing <- testing[c(1:4), ]
testing[!testing==0]<-NULL
testing[!testing==0]<-NA
testing[testing==0]<-NA
testing$TotalIntenCh2<-c(23, 50,57,NA)
testing$FiberWidthCh1<-c(10,10,8,8)
testing$PerimStatusCh1<-c(2,NA,NA,2)
testing$VarIntenCh4<-c(NA,100,100,100)
predict(cart,newdata=testing)
testing
predict(cart,newdata=testing)
predict(cart,newdata=testing,na.action=na.omit)
str(testing)
predict(cart,newdata=testing,type="factor",na.action=na.omit)
predict(cart,newdata=testing,type="vector",na.action=na.omit)
predict(cart,newdata=testing,type="Class",na.action=na.omit)
predict(cart,newdata=testing,type="class",na.action=na.omit)
predict(cart,newdata=testing)
cart<-train(Class~.,data=training,method="rpart")
print(cart$finalModel)
fancyRpartPlot(cart$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(cart$finalModel)
print(cart$finalModel)
predict(cart,newdata=testing)
predict(cart,newdata=testing,type="class")
cart<-rpart(Class~.,data=training)
predict(cart,newdata=testing,type="class")
ls<-predict(cart,newdata=testing)
ls
?rpart
cart<-train(Class~.,data=training,method="rpart")
predict(cart,newdata=testing,type="class")
predict(cart,newdata=testing,type="raw")
cart
summary(cart$finalMode)
summary(cart$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
?pgmm
str(olive)
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
fit<-train(Area~.,data=olive,method="rpart")
predict(fit,newdata=newdata,type="raw")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
?train
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(training)
test1<-predict(fit2,trainSA)
test1
fit2<-train(factor(chd)~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
test1<-predict(fit2,trainSA)
test1
missClass(training$chd,test1)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
test1<-predict(fit2,trainSA)
missClass(training$chd,test1)
trainSA$chd
test1
sets.seed(13234)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
set.seed(13234)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
test1<-predict(fit2,trainSA)
missClass(trainSA$chd,test1)
test2<-predict(fit2,testSA)
missClass(testSA$chd,test2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.test$y<-factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
str(vowel.train)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
library(caret)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(modfit)
summary(modfit)
print(modfit$finalModel)
str(vowel.train)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modfit)
summary(varImp(modfit))
?varImp
varImp.randomForest(modfit)
varImp.RandomForest(modfit)
modfit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
set.seed(33833)
modfit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
voweltotal<-rbind(vowel.test,vowel.train)
set.seed(33833)
modfit<-train(y~.,data=voweltotal,method="rf",prox=TRUE)
varImp(modfit)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modfit)
set.seed(33833)
modfit1<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
varImp(modfit1)
set.seed(33833)
modfit2<-train(y~.,data=voweltotal,method="rf",prox=TRUE)
varImp(modfit2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",prox=TRUE)
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,training,method="lda")
pred1<-predict(fit1,testing)
pred2<-predict(fit2,testing)
pred3<-predict(fit3,testing)
preddf<-data.frame(pred1,pred2,pred3,testing$diagnosis)
combmodfit<-train(testing.diagnosis~.,method="gam",data=preddf)
compred<-predict(combmodfit,preddf)
y<-length(compred)
x<-compred==preddf$testing.diagnosis
sum(x)/y
x3<-pred3==testing$diagnosis
sum(x3)/y
x2<-pred2==testing$diagnosis
sum(x2)/y
x1<-pred1==testing$diagnosis
sum(x1)/y
library(rpart)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
svmmodel<-svm(CompressiveStrength~.,data=training)
View(testing)
svmpred<-predict(svmmodel,testing[-9])
?rmse
error<-testing[,9]-svmpred
error2<-sqrt(sum(error^2)/length(error))
install.packages("devtools")
install.packages("Rtools")
install.packages("Rtools")
install.packages("Rtool")
install.packages("shiny")
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x)),x=slider(1:100)
manipulate(plot(1:x))
x=slider(1:100)
manipulate(plot(1:x));x=slider(1:100)
manipulate(plot(1:x),x=slider(1:100))
manipulate(plot(1:x),x=slider(1,100))
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
?galton
library(HistData)
install.packages("HistData")
library(HistData)
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
HistData::galton
?Galton
data(Galton)
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
myHist<- function(mu){
hist(Galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((Galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
myHist<- function(mu){
hist(Galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=10)
mse<-mean((Galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
1install.packages("rChart")
install.packages("rChart")
library(rChart)
require(Rtools)
install.packages("rChart")
require(Rtools)
require(Rtool)
require(rChart)
install.packages("rCharts")
library(rCharts)
require(rCharts)
require(rCharts)
require(devtools)
install_github('ramnathv/rCharts')
devtools::find_rtools
require("plotly")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data("airquality")
pac<-data("airquality")
pac<-data(airquality)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
install.packages("UsingR")
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
qplot(y=mtcars$mpg,x=mtcars$wt)
qplot(y=mtcars$mpg,x=mtcars$am)
qplot(y=mtcars$mpg,x=mtcars$hp)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
qplot(y=mtcars$mpg,x=mtcars$hp)
qplot(y=mtcars$mpg,x=mtcars$wt)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
print(ui)
print(ui.R)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
?ggplot
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
shiny::runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/New egfr')
load("C:/Users/Bruger/PAC/Documents/tableforposter.RData")
View(alb10)
library(xtable)
xtable(alb10,caption="alb",auto=TRUE)
p<-xtable(alb10,caption="alb",auto=TRUE)
print(p)
p<-xtableFtable(alb10,caption="alb")
print(p)
View(alb10)
View(p)
tbl <- ftable(alb10$DELIVERY,alb10$REF_INTERVAL2,alb10$Method,alb10$Sample_collection,
row.vars = c(2),
dnn = c("Transport", "Age Intervals", "Measurement Method", "Sample Origin"))
print.xtableFtable(tbl,
sanitize.rownames.function = bold,
sanitize.colnames.function = bold)
View(tbl)
tbl <- ftable(alb10$DELIVERY,alb10$REF_INTERVAL2,alb10$Method,alb10$Sample_collection,alb10$median,alb10$n,
row.vars = c(2),
dnn = c("Transport", "Age Intervals", "Measurement Method", "Sample Origin"))
print.xtableFtable(tbl,
sanitize.rownames.function = bold,
sanitize.colnames.function = bold)
View(tbl)
write.csv(alb10,"alb10.csv")
pac<-read.csv("alb10.csv",sep = ";")
View(pac)
pac<-read.csv("alb10.csv",sep = ",")
View(pac)
pac<-read.csv("alb10.csv",sep = ",",row.names = F)
pac<-read.csv("alb10.csv",sep = ",",row.names = FALSE)
pac<-read.csv("alb10.csv",sep = ",",row.names = NULL)
View(pac)
write.csv(alb10,"alb10.csv",row.names = FALSE)
pac<-read.csv("alb10.csv",sep = ",")
View(pac)
library(gridExtra)
source('~/.active-rstudio-document')
df <- read.table(text =
"1/1/2012  USA     5
1/1/2012  Japan   4
1/2/2012  USA     10
1/3/2012  Germany 15"
)
View(df)
names(df) <- c("Date","Country","Trade")
View(df)
View(df)
EqDatedf <- as.data.frame(df[1,])
View(EqDatedf)
EmptyLine <- data.frame(Date = "",Country = "",Trade = "")
View(EmptyLine)
pdf(file = "q.pdf")
for (i in 2:nrow(df))
{
if (as.vector(df$Date[i])  ==  as.vector(df$Date[i-1]))
{EqDatedf <- rbind(EqDatedf, df[i,])}
else {
EqDatedf <- rbind(EqDatedf, EmptyLine)
EqDatedf <- rbind(EqDatedf, df[i,])
}
}
View(EqDatedf)
grid.table(EqDatedf, show.rownames = FALSE)
grid.table(EqDatedf)
dev.off()
View(alb10)
tbl <- ftable(alb10$DELIVERY,alb10$Method,alb10$Sample_collection,alb10$median,alb10$n,alb10$REF_INTERVAL2,
row.vars = c(6),
colvars=c(2,1,3,4,5)
)
tbl <- ftable(alb10$DELIVERY,alb10$Method,alb10$Sample_collection,alb10$median,alb10$n,alb10$REF_INTERVAL2,
row.vars = c(6),
col.vars=c(2,1,3,4,5))
xftbl <- xtableFtable(tbl, method = "row.compact")
pdf(file = "q.pdf")
print.xtableFtable(xftbl,
sanitize.rownames.function = large,
sanitize.colnames.function = bold,
)
dev.off()
pdf(file = "q.pdf")
print.xtableFtable(xftbl)
dev.off()
pdf(file = "q.pdf")
xftbl
dev.off()
?table
tbl <- table(alb10$DELIVERY,alb10$Method,alb10$Sample_collection,alb10$median,alb10$n,alb10$REF_INTERVAL2,
row.names = alb10$REF_INTERVAL2)
tbl
tbl <- xtabs(alb10$REF_INTERVAL2~alb10$DELIVERY+alb10$Method+alb10$Sample_collection+alb10$median+alb10$n,alb10)
tbl <- xtabs(DELIVERY+Method+Sample_collection+median+nREF_INTERVAL2,data=alb10)
library(reshape)
library(reshape2)
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY+median+n)
View(tbl)
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY+median+n,value.var=TRUE)
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY,value.var=median+n)
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY,value.var=c(median,n))
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY,value.var=c("median","n"))
tbl<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY,value.var=c("median"))
tbl2<-dcast(alb10,REF_INTERVAL2~Method+Sample_collection+DELIVERY,value.var=c("n"))
View(tbl2)
setwd("C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/New egfr")
shiny::runApp()
runApp()
runApp()
runApp()
library(slidify)
author('PAC')
getwd()
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/New egfr')
